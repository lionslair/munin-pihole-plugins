#!/usr/bin/env bash

# munin-pihole-plugins
# saint-lascivious (Hayden Pearce) 2022
# saint@sainternet.xyz

install_script="${INSTALL_SCRIPT:-true}"
install_webserver="${INSTALL_WEBSERVER:-true}"
munin_dir="${MUNIN_DIR:-/etc/munin}"
munin_config_dir="${MUNIN_CONFIG_DIR:-$munin_dir/munin-conf.d}"
munin_plugin_dir="${MUNIN_PLUGIN_DIR:-/usr/share/munin/plugins}"
node_plugin_dir="${NODE_PLUGIN_DIR:-$munin_dir/plugins}"
plugin_config_dir="${PLUGIN_CONFIG_DIR:-$munin_dir/plugin-conf.d}"
plugin_list="${PLUGIN_LIST:-blocked cache cache_by_type clients percent queries replies_by_type status unique_domains}"
proxy_config_dir="${PROXY_CONFIG_DIR:-/etc/lighttpd}"
script_dir="${SCRIPT_DIR:-/usr/local/bin}"
skip_dependency_check="${SKIP_DEPENDENCY_CHECK:-false}"

plugin_dependencies="munin-node"
plugin_repo="https://raw.githubusercontent.com/saint-lascivious/munin-pihole-plugins/master"
plugin_services="munin-node"
proxy_repo="https://raw.githubusercontent.com/saint-lascivious/lighttpd-external-munin-proxy/master"
remote_script_version="$(dig TXT +short munin-pihole-plugins.sainternet.xyz @8.8.8.8 -p 53 | sed s'/[^0-9.]//g')"
script_dependencies="init-system-helpers wget"
script_version="2.0.1"
webserver_dependencies="lighttpd munin"
webserver_services="lighttpd munin"

obnoxious_header() {
    echo -e "\\e[31;1m                  _             _ _        _            _           _   v$script_version  "
    echo -e "\\e[33;1m   _ __ _  _ _ _ (_)_ _ __ _ __(_) |_  ___| |___ _ _ __| |_  _ __ _(_)_ _  ___  "
    echo -e "\\e[32;1m  | '  \\ || | ' \\| | ' \\__| '_ \\ | ' \\/ _ \\ / -_)_| '_ \\ | || / _\` | | ' \\(_-<  "
    echo -e "\\e[34;1m  |_|_|_\\_,_|_||_|_|_||_| | .__/_|_||_\\___/_\\___| | .__/_|\\_,_\\__, |_|_||_/__/  "
    echo -e "\\e[36;1m                          |_|                     |_|         |___/             "
    echo -e "\\n\\e[35;1m          A set of Munin plugins for monitoring various Pi-holeÂ® stats          \\e[0m\\n"
}

check_pihole() {
    if [[ ! -x "$(command -v pihole)" ]]; then
        pihole_on_host="no"
        echo -e " * \\e[33;1m[WARNING]\\e[0m the 'pihole' command was not found"
    fi
}

install_dependencies() {
    if [[ "$install_webserver" == "true" ]]; then
        dependency_list="$plugin_dependencies $script_dependencies $webserver_dependencies"
    else
        dependency_list="$plugin_dependencies $script_dependencies"
    fi
    if [[ -x "$(command -v dpkg-query)" ]]; then
        if [[ -x "$(command -v apt)" ]]; then
            for dependency_id in $dependency_list; do
                package_query="$(dpkg-query -W --showformat='${Status}\n' "$dependency_id" | grep "install ok installed")"
                if [[ -z "$package_query" ]]; then
                    apt install "$dependency_id"
                fi
            done
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'apt' was not found"
            exit 1
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'dpkg-query' was not found"
        exit 1
    fi
}

install_script() {
    if [[ -d "$script_dir" ]]; then
        if [[ -f "$script_dir/munin-pihole-plugins" ]]; then
            if [[ "$remote_script_version" > "$script_version" ]]; then
                if [[ -x "$(command -v wget)" ]]; then
                    wget -q --show-progress "$plugin_repo/script/munin-pihole-plugins" -O "$script_dir/munin-pihole-plugins"
                    chmod +x "$script_dir/munin-pihole-plugins"
                else
                    echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
                    exit 1
                fi
            fi
        else
            if [[ -x "$(command -v wget)" ]]; then
                wget -q --show-progress "$plugin_repo/script/munin-pihole-plugins" -P "$script_dir"
                chmod +x "$script_dir/munin-pihole-plugins"
            else
                echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
                exit 1
            fi
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No directory found at"
        echo "$script_dir"
        echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
        echo "export SCRIPT_DIR=\"/path/to/directory\""
        exit 1
    fi
}

configure_proxy() {
    if [[ -d "$proxy_config_dir" ]]; then
        if [[ -s "$proxy_config_dir/external.conf" ]]; then
            mv "$proxy_config_dir/external.conf" "$proxy_config_dir/external.conf.bak" || return
            echo -e " * \\e[32;1m[INFO]\\e[0m Existing lighttpd external.conf backed up to"
            echo "$proxy_config_dir/external.conf.bak"
        else
            rm "$proxy_config_dir/external.conf" || return
        fi
        if [[ -x "$(command -v wget)" ]]; then
            wget -q --show-progress "$proxy_repo/etc/lighttpd/external.conf" -P "$proxy_config_dir"
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
            exit 1
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No lighttpd configuration directory found at"
        echo "$proxy_config_dir"
        echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
        echo "export PROXY_CONFIG_DIR=\"/path/to/directory\""
        exit 1
    fi
}

configure_munin() {
    if [[ -d "$munin_config_dir" ]]; then
        if [[ ! -f "$munin_config_dir/99-graph-strategy.conf" ]]; then
            if [[ -x "$(command -v wget)" ]]; then
                wget -q --show-progress "$plugin_repo/etc/munin/munin-conf.d/99-graph-strategy.conf" -P "$munin_config_dir" || return
            else
                echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
                exit 1
            fi
        fi
    else
        echo -e " * \\e[33;1m[WARNING]\\e[0m Attempting fallback configuration editing munin.conf directly"
        if [[ -d "$munin_dir" ]]; then
            if [[ -f "$munin_dir/munin.conf" ]]; then
                sed -i "s/#html_strategy cron/html_strategy cgi/g" "$munin_dir/munin.conf"
                sed -i "s/#graph_strategy cron/graph_strategy cgi/g" "$munin_dir/munin.conf"
            else
                echo -e " * \\e[31;1m[ERROR]\\e[0m No munin.conf file found at"
                echo "$munin_dir/munin.conf"
                echo -e " * \\e[32;1m[INFO]\\e[0m If this file is located at a different path try"
                echo "export MUNIN_DIR=\"/path/to/directory\""
                exit 1
            fi
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin directory found at"
            echo "$munin_dir"
            echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
            echo "export MUNIN_DIR=\"/path/to/directory\""
            exit 1
        fi
        echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin configuration directory found at"
        echo "$munin_config_dir"
        echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
        echo "export MUNIN_CONFIG_DIR=\"/path/to/directory\""
        exit 1
    fi
}

remove_existing() {
    if [[ -d "$munin_plugin_dir" ]]; then
        for plugin_id in $plugin_list; do
            if [[ -f "$munin_plugin_dir/pihole_$plugin_id" ]]; then
                rm "$munin_plugin_dir/pihole_$plugin_id" || return
            fi
        done
    else
        echo -e " * \\e[33;1m[WARNING]\\e[0m No Munin plugin directory found at"
        echo "$munin_plugin_dir"
        echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
        echo "export MUNIN_PLUGIN_DIR=\"/path/to/directory\""
    fi
    if [[ -d "$node_plugin_dir" ]]; then
        for plugin_link in "$node_plugin_dir"/pihole_*; do
                rm "$plugin_link" 2> /dev/null
        done
    else
        echo -e " * \\e[33;1m[WARNING]\\e[0m No Munin node plugin directory found at"
        echo "$node_plugin_dir"
        echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
        echo "export NODE_PLUGIN_DIR=\"/path/to/directory\""
    fi
}

install_plugins() {
    if [[ -d "$munin_plugin_dir" ]]; then
        if [[ -d "$node_plugin_dir" ]]; then
            for plugin_id in $plugin_list; do
                if [[ -x "$(command -v wget)" ]]; then
                    wget -q --show-progress "$plugin_repo/usr/share/munin/plugins/pihole_$plugin_id" -P "$munin_plugin_dir" || return
                else
                    echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
                    exit 1
                fi
                chmod +x "$munin_plugin_dir/pihole_$plugin_id" || return
                ln -s "$munin_plugin_dir/pihole_$plugin_id" "$node_plugin_dir/pihole_$plugin_id" || return
            done
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin node plugin directory found at"
            echo "$node_plugin_dir"
            echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
            echo "export NODE_PLUGIN_DIR=\"/path/to/directory\""
            exit 1
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin plugin directory found at"
        echo "$munin_plugin_dir"
        echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
        echo "export MUNIN_PLUGIN_DIR=\"/path/to/directory\""
        exit 1
    fi
}

configure_plugins() {
    if [[ -d "$plugin_config_dir" ]]; then
        if [[ ! -f  "$plugin_config_dir/pihole" ]]; then
            if [[ -x "$(command -v wget)" ]]; then
                wget -q --show-progress "$plugin_repo/etc/munin/plugin-conf.d/pihole" -P "$plugin_config_dir"
                echo -e " * \\e[32;1m[INFO]\\e[0m Default plugin configuration saved to"
                echo "$plugin_config_dir/pihole"
            else
                echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
                exit 1
            fi
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin plugin configuration directory found at"
        echo "$plugin_config_dir"
        echo -e " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try"
        echo "export PLUGIN_CONFIG_DIR=\"/path/to/directory\""
        exit 1
    fi
    if [[ "$pihole_on_host" == "no" ]]; then
        echo -e " * \\e[33;1m[WARNING]\\e[0m The 'pihole' command was not found on this host"
        echo "If this was not a mistake, edit"
        echo "$plugin_config_dir/pihole"
        echo "and replace env.host and env.setupvars values with those of your Pi-holeÂ® host"
    fi
}

restart_services() {
    if [[ "$install_webserver" == "true" ]]; then
        service_list="$plugin_services $webserver_services"
    else
        service_list="$plugin_services"
    fi
    if [[ -x "$(command -v service)" ]]; then
        for service_id in $service_list; do
            service "$service_id" restart
        done
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'service' was not found"
        exit 1
    fi
}

help_function() {
    echo -e "Usage: munin-pihole-plugins [option]
Example: munin-pihole-plugins --install

Options:
    -h, --help           Display this help dialogue

    -i, --install        Install and configure munin-pihole-plugins

    -u, --uninstall      Uninstall munin-pihole-plugins

    -U, --update         Update munin-pihole-plugins

    -v, --version        Display the munin-pihole-plugins script version

    -V, --variables      Display a list of environment variables used by
                         munin-pihole-plugins, and their current values"
}

install_function() {
    obnoxious_header
    check_pihole
    if [[ "$skip_dependency_check" == "false" ]]; then
        install_dependencies
    else
        echo -e " * \\e[32;1m[INFO]\\e[0m Skipping dependency checks"
    fi
    if [[ "$install_script" == "true" ]]; then
        install_script
    else
        echo -e " * \\e[32;1m[INFO]\\e[0m Skipping script installation"
    fi
    if [[ "$install_webserver" == "true" ]]; then
        configure_proxy
        configure_munin
    else
        echo -e " * \\e[32;1m[INFO]\\e[0m Skipping webserver installation"
    fi
    remove_existing
    install_plugins
    configure_plugins
    restart_services
    echo -e " * \\e[32;1m[INFO]\\e[0m Done"
}

uninstall_function() {
    obnoxious_header
    remove_existing
    if [[ -d "$proxy_config_dir" ]]; then
        if [[ -f "$proxy_config_dir/external.conf.bak" ]]; then
            mv "$proxy_config_dir/external.conf.bak" "$proxy_config_dir/external.conf" || return
            echo -e " * \\e[32;1m[INFO]\\e[0m Original lighttpd external.conf restored from"
            echo "$proxy_config_dir/external.conf.bak"
        else
            if [[ -f "$proxy_config_dir/external.conf" ]]; then
                rm "$proxy_config_dir/external.conf" || return
                touch "$proxy_config_dir/external".conf
            fi
        fi
    else
        echo -e " * \\e[33;1m[WARNING]\\e[0m No lighttpd configuration directory found at"
        echo "$proxy_config_dir"
    fi
    restart_services
    if [[ -f "$script_dir/munin-pihole-plugins" ]]; then
        rm "$script_dir/munin-pihole-plugins" || return
    fi
    echo -e " * \\e[32;1m[INFO]\\e[0m Done"
}

update_function() {
    obnoxious_header
    remove_existing
    install_plugins
    restart_services
    if [[ "$install_script" == "true" ]]; then
        install_script
    else
        echo -e " * \\e[32;1m[INFO]\\e[0m Skipping script installation"
    fi
    echo -e " * \\e[32;1m[INFO]\\e[0m Done"
}

version_function() {
    if [[ "$remote_script_version" > "$script_version" ]]; then
        echo "An update to the munin-pihole-plugins script is available"
    fi
    echo "munin-pihole-plugins script version is v$script_version (Latest: v$remote_script_version)"
}

variable_function() {
    echo -e "Usage: export [VARIABLE]=\"value\"
Example: export PLUGIN_LIST=\"blocked cache replies_by_type\"

Variables:
    INSTALL_SCRIPT=\"$install_script\"

    INSTALL_WEBSERVER=\"$install_webserver\"

    MUNIN_DIR=\"$munin_dir\"

    MUNIN_CONFIG_DIR=\"$munin_config_dir\"

    MUNIN_PLUGIN_DIR=\"$munin_plugin_dir\"

    NODE_PLUGIN_DIR=\"$node_plugin_dir\"

    PLUGIN_CONFIG_DIR=\"$plugin_config_dir\"

    PLUGIN_LIST=\"$plugin_list\"

    PROXY_CONFIG_DIR=\"$proxy_config_dir\"

    SCRIPT_DIR=\"$script_dir\"

    SKIP_DEPENDENCY_CHECK=\"$skip_dependency_check\""
}

mini_help_function() {
    echo "Invalid option: $1
Use -h or --help for a complete list of options"
}

if [[ ! "$EUID" -eq "0" ]];then
    if [[ -x "$(command -v sudo)" ]]; then
        exec sudo -E bash "$0" "$@"
        exit "$?"
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m Insufficient privileges"
        echo -e "Install sudo or run munin-pihole-plugins as root"
        exit 1
    fi
fi

case "${1}" in
    "-h" | "--help"         ) help_function ;;
    "-i" | "--install"      ) install_function ;;
    "-u" | "--uninstall"    ) uninstall_function ;;
    "-U" | "--update"       ) update_function ;;
    "-v" | "--version"      ) version_function ;;
    "-V" | "--variables"    ) variable_function ;;
    *                       ) mini_help_function "$@" ;;
esac
