#!/usr/bin/env bash

# munin-pihole-plugins
# saint-lascivious (Hayden Pearce) 2022
# saint@sainternet.xyz

# munin-pihole-plugins version
VERSION="4.2.1"

# environment variables with overrides
dns_server="${DNS_SERVER:-208.67.222.222}"
install_plugins="${INSTALL_PLUGINS:-true}"
install_script="${INSTALL_SCRIPT:-true}"
install_webserver="${INSTALL_WEBSERVER:-true}"
munin_dir="${MUNIN_DIR:-/etc/munin}"
munin_config_dir="${MUNIN_CONFIG_DIR:-$munin_dir/munin-conf.d}"
munin_plugin_dir="${MUNIN_PLUGIN_DIR:-/usr/share/munin/plugins}"
node_plugin_dir="${NODE_PLUGIN_DIR:-$munin_dir/plugins}"
plugin_config_dir="${PLUGIN_CONFIG_DIR:-$munin_dir/plugin-conf.d}"
plugin_list="${PLUGIN_LIST:-blocked cache cache_by_type clients percent queries replies_by_type status unique_domains}"
proxy_config_dir="${PROXY_CONFIG_DIR:-/etc/lighttpd}"
script_dir="{SCRIPT_DIR:-/usr/local/bin}"
skip_dependency_check="${SKIP_DEPENDENCY_CHECK:-false}"
update_self="${UPDATE_SELF:-true}"
verbose_output="${VERBOSE_OUTPUT:-true}"

# environment variables without
current_directory="$(dirname "$(readlink -f "$0")")"
get_version="$(dig TXT +short +timeout=5 +tries=1 munin-pihole-plugins.sainternet.xyz @"$dns_server" -p 53 | sed s'/[^0-9.]//g')"
plugin_dependencies="munin-node "
plugin_repo="https://raw.githubusercontent.com/saint-lascivious/munin-pihole-plugins/master"
plugin_services="munin-node "
proxy_repo="https://raw.githubusercontent.com/saint-lascivious/lighttpd-external-munin-proxy/master"
script_dependencies="dnsutils init-system-helpers wget "
terminal_height="$(stty size | cut -d " " -f1)"
terminal_width="$(stty size | cut -d " " -f2)"
webserver_dependencies="lighttpd munin "
webserver_services="lighttpd munin "

# simple privilege check
check_privilege() {
    if [[ ! "$EUID" -eq "0" ]];then
        if [[ -x "$(command -v sudo)" ]]; then
            exec sudo -E bash "$0" "$@"
            exit "$?"
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m Insufficient privileges
   Install sudo or run munin-pihole-plugins as root"
        exit 1
        fi
    fi
}

# there are ways of doing this without spawning a child script
# but they all suck, and/or are extremely convoluted
# this approach is a tradeoff
update_script() {
    cat > "$TEMP/.munin-pihole-plugins_update" << EOF
#!/usr/bin/env bash

# .munin-pihole-plugins_update
# saint-lascivious (Hayden Pearce) 2022
# saint@sainternet.xyz

# a simple you self update function for the munin-pihole-plugins script
update_now() {
    if [[ -x "$(command -v wget)" ]]; then
        wget -q --show-progress munin-pihole-plugins.sainternet.xyz -O "$current_directory/munin-pihole-plugins"
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
        exit 1
    fi
    chmod +x "$current_directory/munin-pihole-plugins" || return
    echo -e " * \\e[32;1m[INFO]\\e[0m Restarting after update"
    exec env UPDATE_SELF="false" /bin/bash "$0" "$@"
}

update_now
EOF
    chmod +x "$TEMP/.munin-pihole-plugins_update"
    echo -e " * \\e[32;1m[INFO]\\e[0m Updating munin-pihole-plugins"
    exec /bin/bash "$TEMP/.munin-pihole-plugins_update"
}

# echo wrapper to handle verbosity
# if verbose_output is set to any value other than true only error messages
# are shown
output() {
    if [ "$verbose_output" == "true" ]; then
      echo -e "$@"
    fi
}

# manditory horrific ascii header
obnoxious_header() {
    if [[ "$terminal_height" -ge "10" ]] && [[ "$terminal_width" -ge "80" ]]; then
        output "\\e[31;1m                  _             _ _        _            _           _   v$VERSION
\\e[33;1m   _ __ _  _ _ _ (_)_ _ __ _ __(_) |_  ___| |___ _ _ __| |_  _ __ _(_)_ _  ___
\\e[32;1m  | '  \\ || | ' \\| | ' \\__| '_ \\ | ' \\/ _ \\ / -_)_| '_ \\ | || / _\` | | ' \\(_-<
\\e[34;1m  |_|_|_\\_,_|_||_|_|_||_| | .__/_|_||_\\___/_\\___| | .__/_|\\_,_\\__, |_|_||_/__/
\\e[36;1m                          |_|                     |_|         |___/
\\e[35;1m Munin plugins and management script for monitoring various Pi-holeÂ® statistics \\e[0m"
    fi
}

# is this a pihole host?
check_pihole() {
    if [[ ! -x "$(command -v pihole)" ]]; then
        pihole_on_host="no"
    fi
}

# basic dependency handling with dpkg-query and apt
# can be disabled with SKIP_DEPENDENCY_CHECK set to any value other than false
install_dependencies() {
    dependency_list+="$script_dependencies"
    if [[ "$install_plugins" == "true" ]]; then
        dependency_list+="$plugin_dependencies"
    fi
    if [[ "$install_webserver" == "true" ]]; then
        dependency_list+="$webserver_dependencies"
    fi
    if [[ -x "$(command -v dpkg-query)" ]]; then
        if [[ -x "$(command -v apt)" ]]; then
            for dependency_id in $dependency_list; do
                output " * \\e[32;1m[INFO]\\e[0m Checking for $dependency_id"
                package_query="$(dpkg-query -W --showformat='${Status}\n' "$dependency_id" | grep "install ok installed")"
                if [[ -z "$package_query" ]]; then
                    apt install "$dependency_id"
                fi
            done
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'apt' was not found"
            exit 1
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'dpkg-query' was not found"
        exit 1
    fi
}

# creatively named wget wrapper
# wget output hinges on verbose_output being set to 'true' (default)
download() {
    if [[ -x "$(command -v wget)" ]]; then
        if [[ "$verbose_output" == "true" ]]; then
            wget -q --show-progress "$@"
        else
            wget -q "$@"
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'wget' was not found"
        exit 1
    fi
}

# installs a related project lighttpd-external-munin-proxy
# backup any existing non-zero lighttpd external.conf if no backup exists
# safely merging any existing external.conf properties without conflict
# would be tedious and annoying, and is out of scope at this point
configure_proxy() {
    proxy_config="$proxy_config_dir/external.conf"
    if [[ -d "$proxy_config_dir" ]]; then
        if [[ -s "$proxy_config" ]]; then
            if [[ ! -f "$proxy_config.orig" ]]; then
                mv "$proxy_config" "$proxy_config.orig" || return
                output " * \\e[32;1m[INFO]\\e[0m Existing lighttpd external.conf backed up to
   $proxy_config.orig"
            fi
        fi
        output " * \\e[32;1m[INFO]\\e[0m Installing Munin webserver proxy configuration"
        download "$proxy_repo/etc/lighttpd/external.conf" -O "$proxy_config"
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No lighttpd configuration directory found at
   $proxy_config_dir"
        output " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try
   export PROXY_CONFIG_DIR=\"/path/to/directory\""
        exit 1
    fi
}

# configure the munin monitoring environment
# two different approaches may be used to set the graph strategy depending on
# the existence of the munin_config_dir
# if it is not found munin-pihole-plugins aill attempt to edit the munin.conf
# file directly
configure_munin() {
    if [[ -d "$munin_config_dir" ]]; then
        if [[ ! -f "$munin_config_dir/99-graph-strategy.conf" ]]; then
            output " * \\e[32;1m[INFO]\\e[0m Installing Munin server graph strategy configuration"
            download "$plugin_repo/etc/munin/munin-conf.d/99-graph-strategy.conf" -P "$munin_config_dir" || return
        fi
    else
        output " * \\e[32;1m[INFO]\\e[0m Attempting fallback configuration editing munin.conf directly"
        if [[ -d "$munin_dir" ]]; then
            if [[ -f "$munin_dir/munin.conf" ]]; then
                sed -i "s/^#html_strategy cron/html_strategy cgi/g" "$munin_dir/munin.conf" || return
                sed -i "s/^#graph_strategy cron/graph_strategy cgi/g" "$munin_dir/munin.conf" || return
            else
                echo -e " * \\e[31;1m[ERROR]\\e[0m No munin.conf file found at
   $munin_dir/munin.conf"
                output " * \\e[32;1m[INFO]\\e[0m If this file is located at a different path try
   export MUNIN_DIR=\"/path/to/directory\""
                exit 1
            fi
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin directory found at
   $munin_dir"
            output " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try
   export MUNIN_DIR=\"/path/to/directory\""
            exit 1
        fi
        echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin configuration directory found at
   $munin_config_dir"
        output " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try
   export MUNIN_CONFIG_DIR=\"/path/to/directory\""
        exit 1
    fi
}

# remove all existing munin-pihole-plugins plugins and symbolic links
# munin will reap abandoned plugin .rrd files itself
uninstall_plugins() {
    all_plugins="blocked cache cache_by_type clients percent queries replies_by_type status unique_domains"
    if [[ -d "$munin_plugin_dir" ]]; then
        for plugin_id in $all_plugins; do
            if [[ -f "$munin_plugin_dir/pihole_$plugin_id" ]]; then
                rm "$munin_plugin_dir/pihole_$plugin_id" || return
            fi
        done
    fi
    if [[ -d "$node_plugin_dir" ]]; then
        for plugin_id in $all_plugins; do
            if [[ -f "$node_plugin_dir/pihole_$plugin_id" ]]; then
                rm "$node_plugin_dir/pihole_$plugin_id" || return
            fi
        done
    fi
}

# installs munin-pihole-plugins plugins and symbolic links
# plugins to be installed can be configured using PLUGIN_LIST
install_plugins() {
    if [[ -d "$munin_plugin_dir" ]]; then
        if [[ -d "$node_plugin_dir" ]]; then
            for plugin_id in $plugin_list; do
                output " * \\e[32;1m[INFO]\\e[0m Installing selected plugin pihole_$plugin_id"
                download "$plugin_repo/usr/share/munin/plugins/pihole_$plugin_id" -P "$munin_plugin_dir" || return
                chmod +x "$munin_plugin_dir/pihole_$plugin_id" || return
                ln -s "$munin_plugin_dir/pihole_$plugin_id" "$node_plugin_dir/pihole_$plugin_id" || return
            done
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin node plugin directory found at
   $node_plugin_dir"
            output " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try
   export NODE_PLUGIN_DIR=\"/path/to/directory\""
            exit 1
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin plugin directory found at
   $munin_plugin_dir"
        output " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try
   export MUNIN_PLUGIN_DIR=\"/path/to/directory\""
        exit 1
    fi
}

# installs a default configuration file
# this should not be required but if it does have to be configured it is nicer
# if it already exists
configure_plugins() {
    if [[ -d "$plugin_config_dir" ]]; then
        if [[ ! -f  "$plugin_config_dir/pihole" ]]; then
            download "$plugin_repo/etc/munin/plugin-conf.d/pihole" -P "$plugin_config_dir"
            output " * \\e[32;1m[INFO]\\e[0m Default plugin configuration saved to
   $plugin_config_dir/pihole"
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No Munin plugin configuration directory found at
   $plugin_config_dir"
        output " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try
   export PLUGIN_CONFIG_DIR=\"/path/to/directory\""
        exit 1
    fi
    if [[ "$pihole_on_host" == "no" ]]; then
        output " * \\e[33;1m[WARNING]\\e[0m The Pi-holeÂ® command 'pihole' was not found on this host
   If this was intentional you will need to edit
   $plugin_config_dir/pihole
   and replace the host and setupvars values with those of your Pi-holeÂ® host"
    fi
}

# restart relevant services
restart_services() {
    if [[ "$install_plugins" == "true" ]]; then
        service_list+="$plugin_services"
    fi
    if [[ "$install_webserver" == "true" ]]; then
        service_list+="$webserver_services"
    fi
    if [[ -n "$service_list" ]]; then
        if [[ -x "$(command -v service)" ]]; then
            for service_id in $service_list; do
                output " * \\e[32;1m[INFO]\\e[0m Restarting $service_id service"
                service "$service_id" restart
            done
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m The required command 'service' was not found"
            exit 1
        fi
    fi
}

# installs the munin-pihole-plugins script on the host
# warn the user if script_dir is not in their path and suggest how to add it
install_script() {
    if [[ -d "$script_dir" ]]; then
        if [[ ! -f "$script_dir/munin-pihole-plugins" ]]; then
            download "$plugin_repo/script/munin-pihole-plugins" -P "$script_dir"
            chmod +x "$script_dir/munin-pihole-plugins" || return
            output " * \\e[32;1m[INFO]\\e[0m A copy of the munin-pihole-plugins script was installed to
   $script_dir/munin-pihole-plugins"
        fi
        if [[ ":$PATH:" != *":$script_dir:"* ]]; then
            output " * \\e[33;1m[WARNING]\\e[0m The munin-pihole-plugins script directory
   $script_dir
   is not in your \$PATH variable try
   export PATH=\"\$PATH:$script_dir\""
        fi
    else
        echo -e " * \\e[31;1m[ERROR]\\e[0m No directory found at
   $script_dir"
        output " * \\e[32;1m[INFO]\\e[0m If this directory is located at a different path try
   export SCRIPT_DIR=\"/path/to/directory\""
        exit 1
    fi
}

# spawns a child script to uninstall a locally installed munin-pihole-plugins
# script if present
uninstall_script() {
            cat > "$TEMP/.munin-pihole-plugins_uninstall" << EOF
#!/usr/bin/env bash

# .munin-pihole-plugins_uninstall
# saint-lascivious (Hayden Pearce) 2022
# saint@sainternet.xyz

# uninstalls a locally installed copy of the munin-pihole-plugins script
uninstall_now() {
    rm "$script_dir/munin-pihole-plugins" || return
    echo -e " * \\e[32;1m[INFO]\\e[0m Done"
}

uninstall_now
EOF
    chmod +x "$TEMP/.munin-pihole-plugins_uninstall"
    exec /bin/bash "$TEMP/.munin-pihole-plugins_uninstall"
}

# an opportunistic pagination wrapper, more or less
some() {
    if [[ "$terminal_height" -lt "$height" ]]; then
        if [[ -x "$(command -v less)" ]]; then
            echo -e "$@" | less
        else
            if [[ -x "$(command -v more)" ]]; then
                echo -e "$@" | more
            else
                echo -e "$@"
            fi
        fi
    else
        echo -e "$@"
    fi
}

# display munin-pihole-plugins script help text
# height is the minimal terminal height required to display the full output
# in an 80 character wide terminal
help_function() {
    case "${2}" in
        "-h" | "--help" | "help"            ) height="7"
            some "Example: munin-pihole-plugins --help
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -h\\t\\t--help\\t\\t\\tDisplay this help dialogue
\\nDisplay munin-pihole-plugins help information." ;;
        "-i" | "--install" | "install"      ) height="18"
            some "Example: munin-pihole-plugins --install
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -i\\t\\t--install\\t\\tInstall munin-pihole-plugins
\\nInstall and configure Munin monitoring server software (default: true), client
software (default: true), selected munin-pihole-plugins plugins (default: all),
and install a copy of the munin-pihole-plugins script (default: true) to a
selected directory (default: /usr/local/bin).
\\nThe munin-pihole-plugins script will self update (default: true) before
installation if a newer version of the munin-pihole-plugins script is
available.
\\nYou can run the installation again at any time to update munin-pihole-plugins
plugins, optionally selecting which plugins to install using the PLUGIN_LIST
variable." ;;
        "-v" | "--version" | "version"      ) height="11"
            some "Example: munin-pihole-plugins --version
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -v\\t\\t--version\\t\\tDisplay the current and latest versions
\\nDisplay the current munin-pihole-plugins script version, and compare it to
the latest munin-pihole-plugins script version.
\\nAn additional notification will be displayed if an update to the
munin-pihole-plugins script is available." ;;
        "-U" | "--uninstall" | "uninstall"  ) height="8"
            some "Example: munin-pihole-plugins --uninstall
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -U\\t\\t--uninstall\\t\\tUninstall munin-pihole-plugins
\\nCompletely uninstall munin-pihole-plugins, you will be asked if you want to
uninstall any dependencies that munin-pihole-plugins may have installed." ;;
        "-V" | "--variables" | "variables"  ) height="9"
            some "Example: munin-pihole-plugins --variables
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -V\\t\\t--variables\\t\\tDisplay environment variables
\\nDisplay a full list of environment variables used by the munin-pihole-plugins
script, and their current values. The veriables can be used to customize
various aspects of the munin-pihole-plugins script's operation." ;;
        *                                   ) height="9"
            some "Usage: munin-pihole-plugins [OPTION]
\\nOption\\t\\tGNU long option\\t\\tMeaning
 -h\\t\\t--help\\t\\t\\tDisplay this help dialogue
 -i\\t\\t--install\\t\\tInstall munin-pihole-plugins
 -v\\t\\t--version\\t\\tDisplay the current and latest versions
 -U\\t\\t--uninstall\\t\\tUninstall munin-pihole-plugins
 -V\\t\\t--variables\\t\\tDisplay environment variables
\\nUse '--help [OPTION]' for a more detailed explanation of each command" ;;
    esac
}

# primary installation function, installation exceptions are handled here
# seems like a lot going on here, but there really isn't
install_function() {
    if [[ ! "$install_plugins" == "true" ]] && [[ ! "$install_script" == "true" ]] && [[ ! "$install_webserver" == "true" ]]; then
        echo -e " * \\e[31;1m[ERROR]\\e[0m No action(s) to perform
   At least one INSTALL_* variable must be \"true\""
        exit 1
    fi
    check_privilege "$@"
    if [[ "$update_self" == "true" ]]; then
        if [[ -f "$TEMP/.munin-pihole-plugins" ]]; then
            rm "$TEMP/.munin-pihole-plugins" || return
        fi
        if [[ "$get_version" > "$VERSION" ]]; then
            update_script "$@"
        fi
    fi
    obnoxious_header
    if [[ "$skip_dependency_check" == "false" ]]; then
        install_dependencies
    else
        output " * \\e[32;1m[INFO]\\e[0m Skipping dependency checks"
    fi
    if [[ "$install_plugins" == "true" ]]; then
        if [[ -n "$plugin_list" ]]; then
            uninstall_plugins
            install_plugins
            check_pihole
            configure_plugins
        else
            echo -e " * \\e[31;1m[ERROR]\\e[0m No action(s) to perform
   No plugins in PLUGIN_LIST"
            exit 1
        fi
    else
        output " * \\e[32;1m[INFO]\\e[0m Skipping plugin installation"
    fi
    if [[ "$install_webserver" == "true" ]]; then
        configure_proxy
        configure_munin
    else
        output " * \\e[32;1m[INFO]\\e[0m Skipping webserver installation"
    fi
    restart_services
    if [[ "$install_script" == "true" ]]; then
        install_script
    else
        output " * \\e[32;1m[INFO]\\e[0m Skipping script installation"
    fi
    output " * \\e[32;1m[INFO]\\e[0m Done"
}

# uninstall munin-pihole-plugins
# removes all munin plugins and related configuration placed by
# munin-pihole-plugins and then prompts to remove any dependencies that may
# have been installed by munin-pihole-plugins (since we don't track what we
# did install if anything)
# places a blank external.conf file for lighttpd if we can't restore a backup
# because apparently it will pitch a fit if external.conf doesn't exist
uninstall_function() {
    check_privilege "$@"
    obnoxious_header
    if [[ -d "$proxy_config_dir" ]]; then
        if [[ -f "$proxy_config_dir/external.conf.orig" ]]; then
            mv "$proxy_config_dir/external.conf.orig" "$proxy_config_dir/external.conf" || return
            output " * \\e[32;1m[INFO]\\e[0m Original lighttpd external.conf restored from backup"
        else
            if [[ -f "$proxy_config_dir/external.conf" ]]; then
                rm "$proxy_config_dir/external.conf" || return
                touch "$proxy_config_dir/external.conf" || return
            fi
        fi
    fi
    if [[ -d "$munin_config_dir" ]]; then
        if [[ -f "$munin_config_dir/99-graph-strategy.conf" ]]; then
            rm "$munin_config_dir/99-graph-strategy.conf" || return
        fi
    else
        if [[ -d "$munin_dir" ]]; then
            if [[ -f "$munin_dir/munin.conf" ]]; then
                sed -i "s/^html_strategy cli/#html_strategy cron/g" "$munin_dir/munin.conf" || return
                sed -i "s/^graph_strategy cli/#graph_strategy cron/g" "$munin_dir/munin.conf" || return
            fi
        fi
    fi
    uninstall_plugins
    if [[ -d "$plugin_config_dir" ]]; then
        if [[ -f  "$plugin_config_dir/pihole" ]]; then
            rm "$plugin_config_dir/pihole" || return
        fi
    fi
    if [[ "$skip_dependency_check" == "false" ]]; then
        all_dependencies="$plugin_dependencies $script_dependencies $webserver_dependencies"
        if [[ -x "$(command -v dpkg-query)" ]]; then
            if [[ -x "$(command -v apt)" ]]; then
                for dependency_id in $all_dependencies; do
                    package_query="$(dpkg-query -W --showformat='${Status}\n' "$dependency_id" | grep "install ok installed")"
                    if [[ -n "$package_query" ]]; then
                        output " * \\e[33;1m[WARNING]\\e[0m $dependency_id may have been installed by munin-pihole-plugins
   Would you like to uninstall $dependency_id now?"
                        if [[ "$dependency_id" == "init-system-helpers" ]] || [[ "$dependency_id" == "wget" ]]; then
                            output " * \\e[32;1m[INFO]\\e[0m It probably wasn't, and you probably wouldn't"
                        fi
                        apt remove "$dependency_id"
                    fi
                done
            fi
        fi
    fi
    if [[ -d "$script_dir" ]]; then
        if [[ -f "$script_dir/munin-pihole-plugins" ]]; then
            uninstall_script
        else
            output " * \\e[32;1m[INFO]\\e[0m Done"
        fi
    fi
}

# display the current and latest munin-pihole-plugins script versions
version_function() {
    if [[ "$get_version" > "$VERSION" ]]; then
        echo "An update for munin-pihole-plugins is available"
    fi
    echo "munin-pihole-plugins version is v$VERSION (Latest: v$get_version)"
}

# display munin-pihole-plugins environment variables and their current values
# there were too many variables to list in the main help text
# height is the minimal terminal height required to display the full output
# in an 80 character wide terminal
variable_function() {
    height="20"
    some "Usage: export [VARIABLE]=\"value\"
\\nVariable
  DNS_SERVER=\"$dns_server\"
  INSTALL_PLUGINS=\"$install_plugins\"
  INSTALL_SCRIPT=\"$install_script\"
  INSTALL_WEBSERVER=\"$install_webserver\"
  MUNIN_DIR=\"$munin_dir\"
  MUNIN_CONFIG_DIR=\"$munin_config_dir\"
  MUNIN_PLUGIN_DIR=\"$munin_plugin_dir\"
  NODE_PLUGIN_DIR=\"$node_plugin_dir\"
  PLUGIN_CONFIG_DIR=\"$plugin_config_dir\"
  PLUGIN_LIST=\"$plugin_list\"
  PROXY_CONFIG_DIR=\"$proxy_config_dir\"
  SCRIPT_DIR=\"$script_dir\"
  SKIP_DEPENDENCY_CHECK=\"$skip_dependency_check\"
  UPDATE_SELF=\"$update_self\"
  VERBOSE_OUTPUT=\"$verbose_output\""
}

# handle invalid input by prompting on how to find valid input
# height is the minimal terminal height required to display the full output
# in an 80 character wide terminal
mini_help_function() {
    height="3"
    some "munin-pihole-plugins: unrecognized option '$1'
Type 'munin-pihole-plugins -h' for a list of available options"
}

# simple input handler
input_handler() {
    case "${1}" in
        "-h" | "--help" | "help"            ) help_function "$@" ;;
        "-i" | "--install" | "install"      ) install_function "$@" ;;
        "-v" | "--version" | "version"      ) version_function ;;
        "-U" | "--uninstall" | "uninstall"  ) uninstall_function "$@" ;;
        "-V" | "--variables" | "variables"  ) variable_function ;;
        *                                   ) mini_help_function "$@" ;;
    esac
}

input_handler "$@"
